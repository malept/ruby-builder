name: Build
env:
  ruby_versions_to_build: '3.1.7 3.2.8 3.3.8 3.4.4'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
      - name: Lint
        run: mise run lint
  generate-matrix:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      ruby_versions: ${{ steps.generate.outputs.ruby_versions }}
    steps:
      - name: Generate JSON
        id: generate
        shell: python
        run: |
          #!/usr/bin/env python3
          import json, os
          with open(os.environ["GITHUB_OUTPUT"], "a") as output:
              output.write("ruby_versions=")
              json.dump(os.environ["ruby_versions_to_build"].split(" "), output)
              output.write("\n")
  build-linux:
    needs: generate-matrix
    strategy:
      matrix:
        distro: ['ubuntu:22.04', 'ubuntu:24.04', 'alpine:3.21']
        os: ['ubuntu-24.04', 'ubuntu-24.04-arm']
        ruby_version: ${{ fromJson(needs.generate-matrix.outputs.ruby_versions) }}
        exclude:
          # Error: JavaScript Actions in Alpine containers are only
          # supported on x64 Linux runners. Detected Linux Arm64
          # See: https://github.com/actions/runner/issues/801
          - os: ubuntu-24.04-arm
            distro: alpine:3.21
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.distro }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup variables
        id: variables
        run: ./scripts/setup-variables.sh ${{ matrix.distro }} ${{ matrix.ruby_version }}
      - name: Setup container
        run: ./scripts/setup-container.sh ${{ steps.variables.outputs.distro_name }} ${{ matrix.ruby_version }}
      - name: Set up .tool-versions
        run: ./scripts/set-tool-versions.sh ${{ matrix.ruby_version }}
      - uses: asdf-vm/actions/setup@v3
      - uses: asdf-vm/actions/install@v3
        env:
          RUBY_CONFIGURE_OPTS: --enable-load-relative ${{ steps.variables.outputs.yjit_arg }}
      - name: Ruby version
        id: ruby
        run: ./scripts/validate-ruby.sh ${{ matrix.ruby_version }}
      - name: Generate SBOM
        uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
        with:
          artifact-name: ruby-${{ matrix.ruby_version }}_${{ steps.variables.outputs.os }}-${{ steps.variables.outputs.arch }}_${{ steps.variables.outputs.distro_name }}-${{ steps.variables.outputs.distro_version }}.sbom.spdx.json
          path: ${{ steps.ruby.outputs.install_location }}
          upload-artifact-retention: 1
          upload-release-assets: false
      - name: Archive Ruby installation
        id: archive_ruby
        run: ./scripts/archive-ruby.sh ${{ steps.variables.outputs.distro_name }} ${{ steps.variables.outputs.distro_version }} ${{ matrix.ruby_version }}
      - name: Upload Ruby tarball as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive_ruby.outputs.ruby_tarball_filename }}
          path: ${{ steps.archive_ruby.outputs.ruby_tarball_path }}
          retention-days: 1
  build-macos:
    needs: generate-matrix
    strategy:
      matrix:
        ruby_version: ${{ fromJson(needs.generate-matrix.outputs.ruby_versions) }}
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure recent bash is installed
        run: brew install bash
      - name: Setup variables
        id: variables
        run: ./scripts/setup-variables.sh none:none ${{ matrix.ruby_version }}
      - name: Set up macOS
        run: ./scripts/setup-macos.sh ${{ matrix.ruby_version }}
      - name: Set up .tool-versions
        run: ./scripts/set-tool-versions.sh ${{ matrix.ruby_version }}
      - uses: asdf-vm/actions/setup@v3
      - uses: asdf-vm/actions/install@v3
        env:
          RUBY_CONFIGURE_OPTS: --enable-load-relative ${{ steps.variables.outputs.yjit_arg }}
      - name: Ruby version
        id: ruby
        run: ./scripts/validate-ruby.sh ${{ matrix.ruby_version }}
      - name: Generate SBOM
        uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
        with:
          artifact-name: ruby-${{ matrix.ruby_version }}_${{ steps.variables.outputs.os }}-${{ steps.variables.outputs.arch }}_${{ steps.variables.outputs.distro_name }}-${{ steps.variables.outputs.distro_version }}.sbom.spdx.json
          path: ${{ steps.ruby.outputs.install_location }}
          upload-artifact-retention: 1
          upload-release-assets: false
      - name: Archive Ruby installation
        id: archive_ruby
        run: ./scripts/archive-ruby.sh ${{ steps.variables.outputs.distro_name }} ${{ steps.variables.outputs.distro_version }} ${{ matrix.ruby_version }}
      - name: Upload Ruby tarball as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive_ruby.outputs.ruby_tarball_filename }}
          path: ${{ steps.archive_ruby.outputs.ruby_tarball_path }}
          retention-days: 1
  upload-tarballs:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-24.04
    permissions:
      # Needed for release upload
      contents: write
      # Needed for build provenance
      id-token: write
      attestations: write
    steps:
      - name: Download Ruby tarballs from artifact repository
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Generate checksums
        run: shasum --algorithm 256 --binary ruby-*.tar.xz ruby-*.sbom.spdx.json > checksums.txt
      - name: Determine release tag
        id: release_tag
        run: echo "tag_name=$(date +%Y%m%d)" >> "$GITHUB_OUTPUT"
        env:
          TZ: UTC
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2.2.0
        with:
          subject-checksums: checksums.txt
      - name: Update binaries tag to latest commit in main
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        run: gh api --method PATCH --field sha=${{ github.sha }} --field force=true /repos/${{ github.repository }}/git/refs/refs/tags/binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload to binaries release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        with:
          files: |
            ruby-*.tar.xz
          fail_on_unmatched_files: true
          tag_name: binaries
      - name: Upload to date-based release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        with:
          files: |
            checksums.txt
            ruby-*.tar.xz
          fail_on_unmatched_files: true
          tag_name: ${{ steps.release_tag.outputs.tag_name }}
          make_latest: true
